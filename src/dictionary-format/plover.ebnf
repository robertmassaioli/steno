output ::= macro | ([\s]* atom [\s]*)+
atom ::= metaCommand | resetFormatting | verbatim

macro ::= "=" macroName (":" macroArgument)?
macroName ::= (letter | "_")+
macroArgument ::= anyChar*
anyChar	::=	#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]	/* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */

resetFormatting ::= "{}"

metaCommand ::= "{" metaCommandType "}"
metaCommandType ::= attachMetaCommand | caseMetaCommand | glueMetaCommand | ifNextMatchesMetaCommand | macroMetaCommand | ploverMetaCommand | modeMetaCommand | keyComboMetaCommand | commaMetaCommand | stopMetaCommand | wordEndMetaCommand | retroCurrencyMetaCommand | legacyMetaCommand | carryCapitalisationMetaCommand

legacyMetaCommand ::= retroDeleteSpace | retroInsertSpace | repeatLastStroke | retroToggleAsterisk
retroToggleAsterisk ::= "*"
retroDeleteSpace ::= "*!"
retroInsertSpace ::= "*?"
repeatLastStroke ::= "*+"

macroMetaCommand ::= ":" macroMetaCommandName (":" macroMetaCommandArg)?
macroMetaCommandName ::= [^:\}]+
macroMetaCommandArg ::= ("\\}" | [^\}])+

ploverMetaCommand ::= "PLOVER:" ploverCommandName (":" ploverMetaCommandArg)?
ploverCommandName ::= "suspend" | "resume" | "toggle" | "add_translation" | "lookup" | "suggestions" | "configure" | "focus" | "quit" | "set_config" | "SUSPEND" | "RESUME" | "TOGGLE" | "ADD_TRANSLATION" | "LOOKUP" | "SUGGESTIONS" | "CONFIGURE" | "FOCUS" | "QUIT" | "SET_CONFIG"
ploverMetaCommandArg ::= ("\\}" | [^\}])+

modeMetaCommand ::= "MODE:" (setSpaceOutputMode | simpleOutputMode)
simpleOutputMode ::= "CAPS" | "SNAKE" | "CAMEL" | "LOWER" | "TITLE" | "CLEAR" | "RESET" | "caps" | "snake" | "camel" | "lower" | "title" | "clear" | "reset"
setSpaceOutputMode ::= ("SET_SPACE" | "set_space") ":" setSpaceTo*
setSpaceTo ::= ("\\}" | [^\}])+

keyComboMetaCommand ::= "#" keyCombos*
/* TODO get better at parsing key combinations and actually understand them: https://plover.readthedocs.io/en/latest/translation_language.html#keyboard-shortcuts */
keyCombos ::= singleKeyCombo (" "+ singleKeyCombo)*
singleKeyCombo ::= modifierGroup | [a-zA-Z0-9_]+
modifierGroup ::= modifier "(" keyCombos* ")"
/* TODO these are all actually case insensitive */
modifier ::= (("Shift" | "SHIFT") "_" [LR]) | "shift" | (("Control" | "CONTROL") "_" [LR]) | "control" | (("Alt" | "ALT") "_" [LR]) | "alt" | (("Super" | "SUPER") "_" [LR]) | "super" | "windows" | "command"

commaMetaCommand ::= "," | ":" | ";"
stopMetaCommand ::= "." | "!" | "?"

caseMetaCommand ::= retroCase | capFirstWord | lowerFirstChar | upperFirstWord
retroCase ::= "*" (capFirstWord | lowerFirstChar | upperFirstWord)
/* Capitalizes the first letter of the next word. */
capFirstWord ::= "-|"
/* Forces the next letter to be lowercase */
lowerFirstChar ::= ">"
/* Outputs the next word in all capital letters */
upperFirstWord ::= "<"

wordEndMetaCommand ::= "$"

/* TODO Allow for better parsing of ifNextMatches: see conditional.py in plover source */
/* {=regex/match_text/no_match_text} */
ifNextMatchesMetaCommand ::= "=" matchSection "/" matchSection "/" matchSection
matchSection ::= (#x5C (#x5C | #x2F) | [^/\{\}\\])*

retroCurrencyMetaCommand ::= "*(" retroCurrencyStart "c" retroCurrencyEnd* ")"
retroCurrencyStart ::= [^c\)\}\{]
retroCurrencyEnd ::= [^\)\}\{]

glueMetaCommand ::= "&" verbatim*

carryCapitalisationMetaCommand ::= "^~|" verbatim* ("^")?

attachMetaCommand ::= attachStart | attachEnd
attachStart ::= "^" attachVerbatim* ("^")?
attachEnd ::= attachVerbatim "^"

attachVerbatim ::= (escapeSequence | attachVerbatimSingle)+
attachVerbatimSingle ::= [^\{\}\^]

verbatim ::= verbatimSegment ([\s]* verbatimSegment)*
verbatimSegment ::= (escapeSequence | verbatimSingle)+
verbatimSingle ::= [^\s\{\}]

escapeSequence ::= backSlash escapableCharacter
escapableCharacter ::= [#x00-#x7F]

backSlash ::= #x5C

/* Special does not contain ^ */
special ::= "." | "-" | "$" | "%" | ":" | "/" | "(" | ")" | "&" | "=>" | "?" | "*" | "รท" | "," | "'"
letter ::= [a-zA-Z]
digit ::= [0-9]
space ::= " "
