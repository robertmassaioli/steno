output ::= macro | ([\s]* atom [\s]*)+
atom ::= metaCommand | resetFormatting | verbatim

macro ::= "=" macroName (":" macroArgument)?
macroName ::= (letter | "_")+
macroArgument ::= anyChar*
anyChar	::=	#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]	/* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */

resetFormatting ::= "{}"

metaCommand ::= "{" metaCommandType "}"
metaCommandType ::= attachMetaCommand | caseMetaCommand | glueMetaCommand | ifNextMatchesMetaCommand | legacyMetaCommand | macroMetaCommand | ploverMetaCommand | modeMetaCommand | keyComboMetaCommand | commaMetaCommand | stopMetaCommand | wordEndMetaCommand | retroCurrencyMetaCommand | carryCapitalisationMetaCommand

legacyMetaCommand ::= retroDeleteSpace | retroInsertSpace | repeatLastStroke | retroToggleAsterisk
retroToggleAsterisk ::= "*"
retroDeleteSpace ::= "*!"
retroInsertSpace ::= "*?"
repeatLastStroke ::= "*+"

macroMetaCommand ::= ":" macroMetaCommandName (":" macroMetaCommandArg)?
macroMetaCommandName ::= [^:\}]+
macroMetaCommandArg ::= ("\\}" | [^\}])+

ploverMetaCommand ::= "PLOVER:" ploverCommandName (":" ploverMetaCommandArg)?
ploverCommandName ::= "suspend" | "resume" | "toggle" | "add_translation" | "lookup" | "suggestions" | "configure" | "focus" | "quit" | "set_config" | "SUSPEND" | "RESUME" | "TOGGLE" | "ADD_TRANSLATION" | "LOOKUP" | "SUGGESTIONS" | "CONFIGURE" | "FOCUS" | "QUIT" | "SET_CONFIG"
ploverMetaCommandArg ::= ("\\}" | [^\}])+

modeMetaCommand ::= "MODE:" (setSpaceOutputMode | simpleOutputMode)
simpleOutputMode ::= "CAPS" | "SNAKE" | "CAMEL" | "LOWER" | "TITLE" | "CLEAR" | "RESET" | "caps" | "snake" | "camel" | "lower" | "title" | "clear" | "reset"
setSpaceOutputMode ::= ("SET_SPACE" | "set_space") ":" setSpaceTo*
setSpaceTo ::= ("\\}" | [^\}])+

keyComboMetaCommand ::= "#" keyCombos*
/* TODO get better at parsing key combinations and actually understand them: https://plover.readthedocs.io/en/latest/translation_language.html#keyboard-shortcuts */
keyCombos ::= singleKeyCombo (" "+ singleKeyCombo)*
singleKeyCombo ::= modifierGroup | accentedLetter | [a-z0-9]
modifierGroup ::= modifier "(" keyCombos* ")"
/* TODO these are all actually case insensitive */
modifier ::= (("Shift" | "SHIFT") "_" [LR]) | "shift" | (("Control" | "CONTROL") "_" [LR]) | "control" | (("Alt" | "ALT") "_" [LR]) | "alt" | (("Super" | "SUPER") "_" [LR]) | "super" | "windows" | "command"
accentedLetter ::= "aacute" | "acircumflex" | "acute" | "adiaeresis" | "ae" | "agrave" | "ampersand" | "apostrophe" | "aring" | "asciicircum" | "asciitilde" | "asterisk" | "at" | "atilde" | "backslash" | "bar" | "braceleft" | "braceright" | "bracketleft" | "bracketright" | "brokenbar" | "ccedilla" | "cedilla" | "cent" | "clear" | "colon" | "comma" | "copyright" | "currency" | "degree" | "diaeresis" | "division" | "dollar" | "eacute" | "ecircumflex" | "ediaeresis" | "egrave" | "equal" | "eth" | "exclam" | "exclamdown" | "grave" | "greater" | "guillemotleft" | "guillemotright" | "hyphen" | "iacute" | "icircumflex" | "idiaeresis" | "igrave" | "less" | "macron" | "masculine" | "minus" | "mu" | "multiply" | "nobreakspace" | "notsign" | "ntilde" | "numbersign" | "oacute" | "ocircumflex" | "odiaeresis" | "ograve" | "onehalf" | "onequarter" | "onesuperior" | "ooblique" | "ordfeminine" | "oslash" | "otilde" | "paragraph" | "parenleft" | "parenright" | "percent" | "period" | "periodcentered" | "plus" | "plusminus" | "question" | "questiondown" | "quotedbl" | "quoteleft" | "quoteright" | "registered" | "return" | "section" | "semicolon" | "slash" | "space" | "ssharp" | "sterling" | "tab" | "thorn" | "threequarters" | "threesuperior" | "twosuperior" | "uacute" | "ucircumflex" | "udiaeresis" | "ugrave" | "underscore" | "yacute" | "ydiaeresis" | "yen" | "AACUTE" | "ACIRCUMFLEX" | "ACUTE" | "ADIAERESIS" | "AE" | "AGRAVE" | "AMPERSAND" | "APOSTROPHE" | "ARING" | "ASCIICIRCUM" | "ASCIITILDE" | "ASTERISK" | "AT" | "ATILDE" | "BACKSLASH" | "BAR" | "BRACELEFT" | "BRACERIGHT" | "BRACKETLEFT" | "BRACKETRIGHT" | "BROKENBAR" | "CCEDILLA" | "CEDILLA" | "CENT" | "CLEAR" | "COLON" | "COMMA" | "COPYRIGHT" | "CURRENCY" | "DEGREE" | "DIAERESIS" | "DIVISION" | "DOLLAR" | "EACUTE" | "ECIRCUMFLEX" | "EDIAERESIS" | "EGRAVE" | "EQUAL" | "ETH" | "EXCLAM" | "EXCLAMDOWN" | "GRAVE" | "GREATER" | "GUILLEMOTLEFT" | "GUILLEMOTRIGHT" | "HYPHEN" | "IACUTE" | "ICIRCUMFLEX" | "IDIAERESIS" | "IGRAVE" | "LESS" | "MACRON" | "MASCULINE" | "MINUS" | "MU" | "MULTIPLY" | "NOBREAKSPACE" | "NOTSIGN" | "NTILDE" | "NUMBERSIGN" | "OACUTE" | "OCIRCUMFLEX" | "ODIAERESIS" | "OGRAVE" | "ONEHALF" | "ONEQUARTER" | "ONESUPERIOR" | "OOBLIQUE" | "ORDFEMININE" | "OSLASH" | "OTILDE" | "PARAGRAPH" | "PARENLEFT" | "PARENRIGHT" | "PERCENT" | "PERIOD" | "PERIODCENTERED" | "PLUS" | "PLUSMINUS" | "QUESTION" | "QUESTIONDOWN" | "QUOTEDBL" | "QUOTELEFT" | "QUOTERIGHT" | "REGISTERED" | "RETURN" | "SECTION" | "SEMICOLON" | "SLASH" | "SPACE" | "SSHARP" | "STERLING" | "TAB" | "THORN" | "THREEQUARTERS" | "THREESUPERIOR" | "TWOSUPERIOR" | "UACUTE" | "UCIRCUMFLEX" | "UDIAERESIS" | "UGRAVE" | "UNDERSCORE" | "YACUTE" | "YDIAERESIS" | "YEN" | "Aacute" | "Acircumflex" | "Acute" | "Adiaeresis" | "Ae" | "Agrave" | "Ampersand" | "Apostrophe" | "Aring" | "Asciicircum" | "Asciitilde" | "Asterisk" | "At" | "Atilde" | "Backslash" | "Bar" | "Braceleft" | "Braceright" | "Bracketleft" | "Bracketright" | "Brokenbar" | "Ccedilla" | "Cedilla" | "Cent" | "Clear" | "Colon" | "Comma" | "Copyright" | "Currency" | "Degree" | "Diaeresis" | "Division" | "Dollar" | "Eacute" | "Ecircumflex" | "Ediaeresis" | "Egrave" | "Equal" | "Eth" | "Exclam" | "Exclamdown" | "Grave" | "Greater" | "Guillemotleft" | "Guillemotright" | "Hyphen" | "Iacute" | "Icircumflex" | "Idiaeresis" | "Igrave" | "Less" | "Macron" | "Masculine" | "Minus" | "Mu" | "Multiply" | "Nobreakspace" | "Notsign" | "Ntilde" | "Numbersign" | "Oacute" | "Ocircumflex" | "Odiaeresis" | "Ograve" | "Onehalf" | "Onequarter" | "Onesuperior" | "Ooblique" | "Ordfeminine" | "Oslash" | "Otilde" | "Paragraph" | "Parenleft" | "Parenright" | "Percent" | "Period" | "Periodcentered" | "Plus" | "Plusminus" | "Question" | "Questiondown" | "Quotedbl" | "Quoteleft" | "Quoteright" | "Registered" | "Return" | "Section" | "Semicolon" | "Slash" | "Space" | "Ssharp" | "Sterling" | "Tab" | "Thorn" | "Threequarters" | "Threesuperior" | "Twosuperior" | "Uacute" | "Ucircumflex" | "Udiaeresis" | "Ugrave" | "Underscore" | "Yacute" | "Ydiaeresis" | "Yen"

commaMetaCommand ::= "," | ":" | ";"
stopMetaCommand ::= "." | "!" | "?"

caseMetaCommand ::= retroCase | capFirstWord | lowerFirstChar | upperFirstWord
retroCase ::= "*" (capFirstWord | lowerFirstChar | upperFirstWord)
/* Capitalizes the first letter of the next word. */
capFirstWord ::= "-|"
/* Forces the next letter to be lowercase */
lowerFirstChar ::= ">"
/* Outputs the next word in all capital letters */
upperFirstWord ::= "<"

wordEndMetaCommand ::= "$"

/* TODO Allow for better parsing of ifNextMatches: see conditional.py in plover source */
/* {=regex/match_text/no_match_text} */
ifNextMatchesMetaCommand ::= "=" matchSection "/" matchSection "/" matchSection
matchSection ::= (#x5C (#x5C | #x2F) | [^/\{\}\\])*

retroCurrencyMetaCommand ::= "*(" retroCurrencyNotC "c" retroCurrencyNotC ")"
retroCurrencyNotC ::= notLowerCLetter | digit | special
notLowerCLetter ::= [abd-zA-Z]

glueMetaCommand ::= "&" verbatim*

carryCapitalisationMetaCommand ::= "^~|" verbatim* ("^")?

attachMetaCommand ::= attachStart | attachEnd
attachStart ::= "^" attachVerbatim* ("^")?
attachEnd ::= attachVerbatim "^"

attachVerbatim ::= (escapeSequence | attachVerbatimSingle)+
attachVerbatimSingle ::= [^\{\}\^]

verbatim ::= verbatimSegment ([\s]* verbatimSegment)*
verbatimSegment ::= (escapeSequence | verbatimSingle)+
verbatimSingle ::= [^\s\{\}]

escapeSequence ::= backSlash escapableCharacter
escapableCharacter ::= [#x00-#x7F]

backSlash ::= #x5C

/* Special does not contain ^ */
special ::= "." | "-" | "$" | "%" | ":" | "/" | "(" | ")" | "&" | "=>" | "?" | "*" | "รท" | "," | "'"
letter ::= [a-zA-Z]
digit ::= [0-9]
space ::= " "
